try {
    timeout(time: 20, unit: 'MINUTES') {
    def appName=env.APP_NAME
    def gitSourceUrl=env.GIT_SOURCE_URL
    def gitSourceRef=env.GIT_SOURCE_REF
    def project=""
    node {
        stage("Initialize") {
            project = env.PROJECT_NAME
            echo "appName: ${appName}"
            echo "gitSourceUrl: ${gitSourceUrl}"
            echo "gitSourceUrl: ${gitSourceUrl}"
            echo "gitSourceRef: ${gitSourceRef}"
        }
    }
    node("maven") {
        stage("Checkout") {
        git url: "${gitSourceUrl}", branch: "${gitSourceRef}"
        }
        stage("Build JAR") {
        sh "mvn clean package"
        stash name:"jar", includes:"target/app.jar"
        }
    }
    node {
        stage("Build Image") {
        unstash name:"jar"
        sh "oc start-build ${appName}-build --from-file=target/app.jar -n ${project}"
        timeout(time: 20, unit: 'MINUTES') {
            openshift.withCluster() {
            openshift.withProject() {
                def bc = openshift.selector('bc', "${appName}-build")
                echo "Found 1 ${bc.count()} buildconfig"
                def blds = bc.related('builds')
                blds.untilEach {
                return it.object().status.phase == "Complete"
                }
            }
            }  
        }
        }
        stage("Deploy") {
        openshift.withCluster() {
            openshift.withProject() {
            def dc = openshift.selector('dc', "${appName}")
            dc.rollout().status()
            }
        }
        }
    }
    }
} catch (err) {
    echo "in catch block"
    echo "Caught: ${err}"
    currentBuild.result = 'FAILURE'
    throw err
}
